import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  Bell, 
  Settings, 
  Clock, 
  CheckCircle,
  AlertCircle,
  Info,
  Calendar,
  Users,
  MessageSquare,
  Star,
  Archive,
  Trash2,
  Plus,
  Edit,
  Copy,
  Send,
  Filter,
  Search
} from "lucide-react"
import { Label } from "@/components/ui/label"
import { format } from "date-fns"

interface Notification {
  id: string
  title: string
  message: string
  type: 'info' | 'success' | 'warning' | 'error' | 'reminder' | 'birthday' | 'anniversary' | 'festival'
  category: 'student' | 'donor' | 'college' | 'admin' | 'all'
  priority: 'low' | 'medium' | 'high'
  timestamp: string
  read: boolean
  starred: boolean
  autoGenerated: boolean
  scheduledDate?: string
  targetUsers: string[]
}

interface AutoMessage {
  id: string
  name: string
  type: 'birthday' | 'anniversary' | 'festival' | 'reminder' | 'custom'
  message: string
  enabled: boolean
  schedule: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly'
  targetCategory: 'student' | 'donor' | 'college' | 'admin' | 'all'
  lastSent?: string
  nextSend?: string
}

export default function AdminNotifications() {
  const [activeTab, setActiveTab] = useState("all")
  const [searchQuery, setSearchQuery] = useState("")
  const [filterType, setFilterType] = useState<string>("all")
  const [filterPriority, setFilterPriority] = useState<string>("all")
  const [showAutoMessageForm, setShowAutoMessageForm] = useState(false)

  const [notifications, setNotifications] = useState<Notification[]>([
    {
      id: "1",
      title: "New Student Application",
      message: "Rahul Kumar has submitted a new scholarship application",
      type: "info",
      category: "student",
      priority: "medium",
      timestamp: "2024-01-15T10:30:00",
      read: false,
      starred: true,
      autoGenerated: false,
      targetUsers: ["admin1", "admin2"]
    },
    {
      id: "2",
      title: "Document Verification Required",
      message: "5 student documents are pending verification",
      type: "warning",
      category: "student",
      priority: "high",
      timestamp: "2024-01-15T09:15:00",
      read: false,
      starred: false,
      autoGenerated: true,
      targetUsers: ["admin1"]
    },
    {
      id: "3",
      title: "Donation Received",
      message: "New donation of â‚¹50,000 received from John Doe",
      type: "success",
      category: "donor",
      priority: "medium",
      timestamp: "2024-01-14T16:45:00",
      read: true,
      starred: false,
      autoGenerated: false,
      targetUsers: ["admin1", "admin2"]
    },
    {
      id: "4",
      title: "Birthday Reminder",
      message: "Today is Priya Sharma's birthday. Send birthday wishes!",
      type: "birthday",
      category: "student",
      priority: "low",
      timestamp: "2024-01-15T00:00:00",
      read: false,
      starred: false,
      autoGenerated: true,
      targetUsers: ["admin1"]
    },
    {
      id: "5",
      title: "Payment Pending",
      message: "10 student payments are pending college verification",
      type: "warning",
      category: "student",
      priority: "high",
      timestamp: "2024-01-14T14:20:00",
      read: true,
      starred: true,
      autoGenerated: true,
      targetUsers: ["admin1", "admin2"]
    },
    {
      id: "6",
      title: "Festival Greetings",
      message: "Diwali festival reminder - send greetings to all donors",
      type: "festival",
      category: "donor",
      priority: "medium",
      timestamp: "2024-01-13T12:00:00",
      read: false,
      starred: false,
      autoGenerated: true,
      targetUsers: ["admin1"]
    }
  ])

  const [autoMessages, setAutoMessages] = useState<AutoMessage[]>([
    {
      id: "1",
      name: "Birthday Wishes",
      type: "birthday",
      message: "Happy Birthday! ðŸŽ‰ Wishing you a wonderful day filled with joy and success. Thank you for being part of our scholarship community.",
      enabled: true,
      schedule: "daily",
      targetCategory: "all",
      lastSent: "2024-01-15T00:00:00",
      nextSend: "2024-01-16T00:00:00"
    },
    {
      id: "2",
      name: "Donation Reminder",
      type: "reminder",
      message: "Dear donor, this is a friendly reminder about your upcoming donation. Your support makes a real difference in students' lives.",
      enabled: true,
      schedule: "monthly",
      targetCategory: "donor",
      lastSent: "2024-01-01T00:00:00",
      nextSend: "2024-02-01T00:00:00"
    },
    {
      id: "3",
      name: "Document Upload Reminder",
      type: "reminder",
      message: "Dear student, please remember to upload your semester mark sheets. This helps us track your academic progress.",
      enabled: true,
      schedule: "quarterly",
      targetCategory: "student",
      lastSent: "2024-01-01T00:00:00",
      nextSend: "2024-04-01T00:00:00"
    },
    {
      id: "4",
      name: "Festival Greetings",
      type: "festival",
      message: "Happy Diwali! ðŸª” May this festival of lights bring joy and prosperity to you and your family.",
      enabled: false,
      schedule: "yearly",
      targetCategory: "all",
      lastSent: "2023-11-12T00:00:00",
      nextSend: "2024-11-01T00:00:00"
    }
  ])

  const [newAutoMessage, setNewAutoMessage] = useState<Partial<AutoMessage>>({
    name: "",
    type: "custom",
    message: "",
    enabled: true,
    schedule: "monthly",
    targetCategory: "all"
  })

  const filteredNotifications = notifications.filter(notification => {
    const matchesSearch = notification.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         notification.message.toLowerCase().includes(searchQuery.toLowerCase())
    
    const matchesType = filterType === "all" || notification.type === filterType
    const matchesPriority = filterPriority === "all" || notification.priority === filterPriority
    
    return matchesSearch && matchesType && matchesPriority
  })

  const unreadCount = notifications.filter(n => !n.read).length
  const starredCount = notifications.filter(n => n.starred).length
  const autoGeneratedCount = notifications.filter(n => n.autoGenerated).length

  const markAsRead = (id: string) => {
    setNotifications(prev => 
      prev.map(n => n.id === id ? { ...n, read: true } : n)
    )
  }

  const toggleStar = (id: string) => {
    setNotifications(prev => 
      prev.map(n => n.id === id ? { ...n, starred: !n.starred } : n)
    )
  }

  const deleteNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id))
  }

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'success':
        return <CheckCircle className="h-5 w-5 text-green-500" />
      case 'warning':
        return <AlertCircle className="h-5 w-5 text-yellow-500" />
      case 'error':
        return <AlertCircle className="h-5 w-5 text-red-500" />
      case 'birthday':
        return <Calendar className="h-5 w-5 text-pink-500" />
      case 'festival':
        return <Star className="h-5 w-5 text-purple-500" />
      default:
        return <Info className="h-5 w-5 text-blue-500" />
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800'
      case 'low':
        return 'bg-green-100 text-green-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'success':
        return 'bg-green-100 text-green-800'
      case 'warning':
        return 'bg-yellow-100 text-yellow-800'
      case 'error':
        return 'bg-red-100 text-red-800'
      case 'birthday':
        return 'bg-pink-100 text-pink-800'
      case 'festival':
        return 'bg-purple-100 text-purple-800'
      default:
        return 'bg-blue-100 text-blue-800'
    }
  }

  const handleCreateAutoMessage = () => {
    if (!newAutoMessage.name || !newAutoMessage.message) {
      return
    }

    const autoMessage: AutoMessage = {
      id: Date.now().toString(),
      name: newAutoMessage.name,
      type: newAutoMessage.type as any,
      message: newAutoMessage.message,
      enabled: newAutoMessage.enabled || true,
      schedule: newAutoMessage.schedule as any,
      targetCategory: newAutoMessage.targetCategory as any
    }

    setAutoMessages(prev => [...prev, autoMessage])
    setNewAutoMessage({
      name: "",
      type: "custom",
      message: "",
      enabled: true,
      schedule: "monthly",
      targetCategory: "all"
    })
    setShowAutoMessageForm(false)
  }

  const toggleAutoMessage = (id: string) => {
    setAutoMessages(prev => 
      prev.map(am => am.id === id ? { ...am, enabled: !am.enabled } : am)
    )
  }

  // Mark all notifications as read on mount
  useEffect(() => {
    setNotifications(prev => prev.map(n => ({ ...n, read: true })))
  }, [])

  return (
      <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
            <div>
          <h1 className="text-3xl font-bold">Notifications</h1>
          <p className="text-muted-foreground">Manage system notifications and auto-messages</p>
            </div>
        <div className="flex gap-2">
          <Button onClick={() => setShowAutoMessageForm(true)}>
            <Plus className="mr-2 h-4 w-4" />
            Create Auto Message
          </Button>
        </div>
          </div>

      {/* Statistics */}
      <div className="grid md:grid-cols-4 gap-4">
        <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
              <Bell className="h-8 w-8 text-blue-500" />
                  <div>
                <p className="text-2xl font-bold">{notifications.length}</p>
                <p className="text-sm text-muted-foreground">Total</p>
                  </div>
                </div>
              </CardContent>
            </Card>
        <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
              <AlertCircle className="h-8 w-8 text-yellow-500" />
                  <div>
                <p className="text-2xl font-bold">{unreadCount}</p>
                <p className="text-sm text-muted-foreground">Unread</p>
                  </div>
                </div>
              </CardContent>
            </Card>
        <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
              <Star className="h-8 w-8 text-yellow-500" />
                  <div>
                <p className="text-2xl font-bold">{starredCount}</p>
                <p className="text-sm text-muted-foreground">Starred</p>
                  </div>
                </div>
              </CardContent>
            </Card>
        <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
              <MessageSquare className="h-8 w-8 text-green-500" />
                  <div>
                <p className="text-2xl font-bold">{autoGeneratedCount}</p>
                <p className="text-sm text-muted-foreground">Auto Generated</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

      <div className="flex flex-col md:flex-row gap-6 w-full">
        <div className="flex-1 min-h-[500px] flex flex-col">
          {/* Notifications List */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Notifications</CardTitle>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">
                    <Filter className="mr-2 h-4 w-4" />
                    Filter
                  </Button>
                  <Button variant="outline" size="sm">
                    <Archive className="mr-2 h-4 w-4" />
                    Archive All
                  </Button>
                </div>
              </div>
              
              {/* Search and Filters */}
              <div className="space-y-2">
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search notifications..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
                <div className="flex gap-2">
                  <Select value={filterType} onValueChange={setFilterType}>
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Types</SelectItem>
                      <SelectItem value="info">Info</SelectItem>
                      <SelectItem value="success">Success</SelectItem>
                      <SelectItem value="warning">Warning</SelectItem>
                      <SelectItem value="error">Error</SelectItem>
                      <SelectItem value="birthday">Birthday</SelectItem>
                      <SelectItem value="festival">Festival</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={filterPriority} onValueChange={setFilterPriority}>
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Priority" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Priorities</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-0">
              <Tabs value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid w-full grid-cols-4">
                  <TabsTrigger value="all">All</TabsTrigger>
                  <TabsTrigger value="unread">Unread</TabsTrigger>
                  <TabsTrigger value="starred">Starred</TabsTrigger>
                  <TabsTrigger value="auto">Auto</TabsTrigger>
                </TabsList>
                
                <TabsContent value="all" className="mt-0">
                  <div className="max-h-96 overflow-y-auto">
                    {filteredNotifications.map((notification) => (
                      <div
                    key={notification.id}
                        className={`p-4 border-b hover:bg-gray-50 transition-colors ${
                          !notification.read ? 'bg-blue-50' : ''
                        }`}
                      >
                        <div className="flex items-start gap-3">
                          {getNotificationIcon(notification.type)}
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between">
                              <p className={`font-medium ${!notification.read ? 'font-semibold' : ''}`}>
                                {notification.title}
                              </p>
                              <div className="flex items-center gap-2">
                                <Badge className={getPriorityColor(notification.priority)}>
                                  {notification.priority}
                                </Badge>
                                <Badge className={getTypeColor(notification.type)}>
                                  {notification.type}
                                </Badge>
                                {notification.autoGenerated && (
                                  <Badge variant="outline">Auto</Badge>
                                )}
                                <span className="text-xs text-muted-foreground">
                                  {format(new Date(notification.timestamp), 'MMM d, h:mm a')}
                                </span>
                    </div>
                          </div>
                            <p className="text-sm text-muted-foreground mt-1">
                            {notification.message}
                          </p>
                            <div className="flex items-center gap-2 mt-2">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => markAsRead(notification.id)}
                                disabled={notification.read}
                              >
                                <CheckCircle className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => toggleStar(notification.id)}
                              >
                                <Star className={`h-4 w-4 ${notification.starred ? 'text-yellow-500 fill-current' : ''}`} />
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => deleteNotification(notification.id)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                        </div>
                        </div>
                      </div>
                ))}
              </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        </div>

        <div className="flex-1 min-h-[500px] flex flex-col">
          {/* Auto Messages */}
          <Card>
            <CardHeader>
              <CardTitle>Auto Messages</CardTitle>
              <CardDescription>
                Manage automated message templates
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {autoMessages.map((autoMessage) => (
                <div key={autoMessage.id} className="border rounded-lg p-3">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium">{autoMessage.name}</h4>
                    <Switch
                      checked={autoMessage.enabled}
                      onCheckedChange={() => toggleAutoMessage(autoMessage.id)}
                    />
                  </div>
                  <p className="text-sm text-muted-foreground mb-2">
                    {autoMessage.message.substring(0, 100)}...
                  </p>
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <span className="capitalize">{autoMessage.schedule}</span>
                    <span className="capitalize">{autoMessage.targetCategory}</span>
                  </div>
                  {autoMessage.nextSend && (
                    <p className="text-xs text-muted-foreground mt-1">
                      Next: {format(new Date(autoMessage.nextSend), 'MMM d')}
                    </p>
                  )}
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Create Auto Message Dialog */}
      {showAutoMessageForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4"
          >
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Create Auto Message</h2>
              <Button variant="ghost" onClick={() => setShowAutoMessageForm(false)}>Ã—</Button>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label>Message Name</Label>
                <Input
                  value={newAutoMessage.name}
                  onChange={(e) => setNewAutoMessage(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="Enter message name"
                />
              </div>
              
              <div>
                <Label>Message Type</Label>
                <Select 
                  value={newAutoMessage.type} 
                  onValueChange={(value) => setNewAutoMessage(prev => ({ ...prev, type: value as any }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="birthday">Birthday</SelectItem>
                    <SelectItem value="anniversary">Anniversary</SelectItem>
                    <SelectItem value="festival">Festival</SelectItem>
                    <SelectItem value="reminder">Reminder</SelectItem>
                    <SelectItem value="custom">Custom</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label>Target Category</Label>
                <Select 
                  value={newAutoMessage.targetCategory} 
                  onValueChange={(value) => setNewAutoMessage(prev => ({ ...prev, targetCategory: value as any }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select target" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Users</SelectItem>
                    <SelectItem value="student">Students</SelectItem>
                    <SelectItem value="donor">Donors</SelectItem>
                    <SelectItem value="college">Colleges</SelectItem>
                    <SelectItem value="admin">Admins</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label>Schedule</Label>
                <Select 
                  value={newAutoMessage.schedule} 
                  onValueChange={(value) => setNewAutoMessage(prev => ({ ...prev, schedule: value as any }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select schedule" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="daily">Daily</SelectItem>
                    <SelectItem value="weekly">Weekly</SelectItem>
                    <SelectItem value="monthly">Monthly</SelectItem>
                    <SelectItem value="quarterly">Quarterly</SelectItem>
                    <SelectItem value="yearly">Yearly</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label>Message Content</Label>
                <Textarea
                  value={newAutoMessage.message}
                  onChange={(e) => setNewAutoMessage(prev => ({ ...prev, message: e.target.value }))}
                  placeholder="Enter your message content"
                  rows={4}
                />
              </div>
              
              <div className="flex items-center space-x-2">
                <Switch
                  checked={newAutoMessage.enabled}
                  onCheckedChange={(checked) => setNewAutoMessage(prev => ({ ...prev, enabled: checked }))}
                />
                <Label>Enable auto message</Label>
              </div>
              
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={() => setShowAutoMessageForm(false)}>
                  Cancel
                </Button>
                <Button onClick={handleCreateAutoMessage}>
                  <Send className="mr-2 h-4 w-4" />
                  Create
                </Button>
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  )
}